from flask import Flask, request, jsonify
import os
import requests
import json
import logging
from openai import OpenAI
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# API keys
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY", "")

# Initialize OpenAI client with proper error handling
try:
    openai_client = OpenAI(api_key=OPENAI_API_KEY)
    logger.info("OpenAI client initialized successfully")
except Exception as e:
    logger.error(f"Error initializing OpenAI client: {e}")
    # Attempt with basic configuration
    openai_client = OpenAI(
        api_key=OPENAI_API_KEY,
        base_url="https://api.openai.com/v1"
    )
    logger.info("OpenAI client initialized with basic configuration")

@app.route('/api/generate-svg', methods=['POST'])
def generate_svg():
    try:
        data = request.json
        user_input = data.get('prompt', '')
        
        if not user_input:
            return jsonify({"error": "No prompt provided"}), 400
        
        # Step 1: Enhance the prompt using first OpenAI model
        prompt_enhancer_model = "ft:gpt-4o-mini-2024-07-18:wrecked-labs::BEEibbWw"
        enhanced_prompt = enhance_prompt(user_input, prompt_enhancer_model)
        
        # Step 2: Generate SVG using second OpenAI model
        svg_generator_model = "ft:gpt-4o-mini-2024-07-18:wrecked-labs::BD4sS07O"
        svg_code = generate_svg_from_prompt(enhanced_prompt, svg_generator_model)
        
        # Step 3: Validate and improve SVG using Gemini
        validated_svg = validate_svg_with_gemini(svg_code)
        
        return jsonify({
            "original_prompt": user_input,
            "enhanced_prompt": enhanced_prompt,
            "svg_code": validated_svg
        })
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def enhance_prompt(user_input, model_name):
    """Enhance user prompt using OpenAI model"""
    system_prompt = """You are a prompt enhancer for SVG generation. 
    Your task is to take a user's simple request and transform it into a detailed, 
    specific prompt that will help generate high-quality SVG images.
    Add details about style, colors, shapes, and other visual elements.
    Keep your enhancement concise but descriptive."""
    
    response = openai_client.chat.completions.create(
        model=model_name,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_input}
        ],
        temperature=0.7,
        max_tokens=300
    )
    
    return response.choices[0].message.content

def generate_svg_from_prompt(enhanced_prompt, model_name):
    """Generate SVG code using OpenAI model"""
    system_prompt = """You are an SVG code generator. 
    Given a prompt, create clean, valid SVG code that represents the described image.
    Only provide the raw SVG code without any markdown formatting or explanation."""
    
    response = openai_client.chat.completions.create(
        model=model_name,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": enhanced_prompt}
        ],
        temperature=0.5,
        max_tokens=1000
    )
    
    return response.choices[0].message.content

def validate_svg_with_gemini(svg_code):
    """Validate and improve SVG code using Gemini model"""
    gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-experimental-03-25:generateContent?key={GEMINI_API_KEY}"
    
    prompt = f"""
    Validate and improve the following SVG code:
    
    ```
    {svg_code}
    ```
    
    Check for any issues, optimize the code, and return only the valid, improved SVG code without any explanation or markdown formatting.
    The output should be a single SVG code block that can be directly used in an HTML document.
    """
    
    payload = {
        "contents": [{
            "parts": [{"text": prompt}]
        }]
    }
    
    headers = {
        "Content-Type": "application/json"
    }
    
    response = requests.post(gemini_url, headers=headers, data=json.dumps(payload))
    response_data = response.json()
    
    # Extract SVG code from Gemini response
    try:
        text_content = response_data["candidates"][0]["content"]["parts"][0]["text"]
        
        # Extract SVG code from response (in case Gemini adds explanation)
        if "```" in text_content:
            # Try to extract code from markdown code blocks
            svg_lines = text_content.split("```")
            for i, block in enumerate(svg_lines):
                if i > 0 and i % 2 == 1:  # This is a code block
                    if block.strip().startswith("svg") or block.strip().startswith("<svg"):
                        return block.strip()
            # If no SVG block found, return the first code block
            for i, block in enumerate(svg_lines):
                if i > 0 and i % 2 == 1:
                    return block.strip()
        
        # If no code blocks, look for SVG tags
        if "<svg" in text_content and "</svg>" in text_content:
            start = text_content.find("<svg")
            end = text_content.find("</svg>") + 6
            return text_content[start:end]
            
        return text_content.strip()
    except Exception as e:
        print(f"Error processing Gemini response: {e}")
        return svg_code  # Return original SVG if there's an error

if __name__ == '__main__':
    app.run(debug=True, port=5000) 