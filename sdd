#!/usr/bin/env python3
import os
import logging
from io import BytesIO
import base64
from datetime import datetime

import numpy as np
from PIL import Image
from openai import OpenAI

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('text_removal.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Initialize OpenAI client with API key
client = OpenAI(api_key="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")

# Create directories for storing images
IMAGES_DIR = "processed_images"
os.makedirs(IMAGES_DIR, exist_ok=True)

# Generate timestamp for unique filenames
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

# 1. Load the original image
INPUT_IMAGE = "ChatGPT Image Jun 8, 2025, 03_26_01 AM.png"
logger.info(f"Processing image: {INPUT_IMAGE}")

img = Image.open(INPUT_IMAGE).convert("RGB")
# Save copy of input image
input_copy_path = os.path.join(IMAGES_DIR, f"input_{timestamp}.png")
img.save(input_copy_path)
logger.info(f"Saved input image copy to: {input_copy_path}")

# 2. Create a mask by thresholding out the bright (white) text
logger.info("Creating binary mask...")
gray = img.convert("L")
thr = 240
mask_arr = np.array(gray)
mask_binary = (mask_arr > thr).astype(np.uint8) * 255
mask = Image.fromarray(mask_binary, mode="L")

# Save binary mask
mask_bw_path = os.path.join(IMAGES_DIR, f"mask_bw_{timestamp}.png")
mask.save(mask_bw_path)
logger.info(f"Saved binary mask to: {mask_bw_path}")

# 3. Turn that into an RGBA mask (white = opaque, black = transparent)
logger.info("Converting to RGBA mask...")
mask_rgba = mask.convert("RGBA")
mask_rgba.putalpha(mask)
buf = BytesIO()
mask_rgba.save(buf, format="PNG")
mask_bytes = buf.getvalue()

# Save RGBA mask
mask_rgba_path = os.path.join(IMAGES_DIR, f"mask_rgba_{timestamp}.png")
with open(mask_rgba_path, "wb") as f:
    f.write(mask_bytes)
logger.info(f"Saved RGBA mask to: {mask_rgba_path}")

# 4. Call the Images Edit API to "erase" the text region
logger.info("Calling OpenAI API to remove text...")
try:
    response = client.images.edit(
        model="gpt-image-1",
        image=open(INPUT_IMAGE, "rb"),
        mask=open(mask_rgba_path, "rb"),
        prompt=(
          "Remove the text from this image"
        ),
        n=1,
        size="1024x1024",
        response_format="b64_json",
    
    logger.info("Successfully received API response")
except Exception as e:
    logger.error(f"Error calling OpenAI API: {str(e)}")
    raise

# 5. Decode and write out the result
output_path = os.path.join(IMAGES_DIR, f"output_{timestamp}.png")
b64 = response.data[0].b64_json
out = base64.b64decode(b64)
with open(output_path, "wb") as f:
    f.write(out)

logger.info(f"âœ… Saved final output to: {output_path}")